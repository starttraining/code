https://github.com/starttraining/code/blob/main/adk_mcp_tools.zip

Task 1. Install ADK and set up your environment
Note: Using an Incognito browser window is recommended for most Qwiklabs to avoid confusion between your Qwiklabs student account and other accounts logged into Google Cloud. If you are using Chrome, the easiest way to accomplish this is to close any Incognito windows, then right click on the Open Google Cloud console button at the top of this lab and select Open link in Incognito window.
Enable recommended APIs
In this lab environment, the Vertex AI API, Routes API and Directions API have been enabled for you.
Prepare a Cloud Shell Editor tab
With your Google Cloud console window selected, open Cloud Shell by pressing the G key and then the S key on your keyboard. Alternatively, you can click the Activate Cloud Shell button (Activate Cloud Shell) in the upper right of the Cloud console.

Click Continue.

When prompted to authorize Cloud Shell, click Authorize.

In the upper right corner of the Cloud Shell Terminal panel, click the Open in new window button Open in new window button.

In the Cloud Shell Terminal, enter the following to open the Cloud Shell Editor to your home directory:

cloudshell workspace ~
Copied!
Close any additional tutorial or Gemini panels that appear on the right side of the screen to save more of your window for your code editor.

Throughout the rest of this lab, you can work in this window as your IDE with the Cloud Shell Editor and Cloud Shell Terminal.

Download and install ADK and code samples for this lab
Install ADK by running the following command in the Cloud Shell Terminal.

Note: You will specify the version to ensure that the version of ADK that you install corresponds to the version used in this lab. You can view the latest version number and release notes at the adk-python repo.
sudo python3 -m pip install google-adk==1.5.0
Copied!
Paste the following commands into the Cloud Shell Terminal to copy a file from a Cloud Storage bucket, and unzip it, creating a project directory with code for this lab:

gcloud storage cp gs://qwiklabs-gcp-01-e2ce529e6af0-bucket/adk_mcp_tools.zip .
unzip adk_mcp_tools.zip
Copied!
Install additional lab requirements with:

python3 -m pip install -r adk_mcp_tools/requirements.txt
Copied!
Task 2. Using Google Maps MCP server with ADK agents (ADK as an MCP client) in adk web
This section demonstrates how to integrate tools from an external Google Maps MCP server into your ADK agents. This is the most common integration pattern when your ADK agent needs to use capabilities provided by an existing service that exposes an MCP interface. You will see how the MCPToolset class can be directly added to your agent's tools list, enabling seamless connection to an MCP server, discovery of its tools, and making them available for your agent to use. These examples primarily focus on interactions within the adk web development environment.

MCPToolset
The MCPToolset class is ADK's primary mechanism for integrating tools from an MCP server. When you include an MCPToolset instance in your agent's tools list, it automatically handles the interaction with the specified MCP server. Here's how it works:

Connection Management: On initialization, MCPToolset establishes and manages the connection to the MCP server. This can be a local server process (using StdioServerParameters for communication over standard input/output) or a remote server (using SseServerParams for Server-Sent Events). The toolset also handles the graceful shutdown of this connection when the agent or application terminates.
Tool Discovery & Adaptation: Once connected, MCPToolset queries the MCP server for its available tools (via the list_tools MCP method). It then converts the schemas of these discovered MCP tools into ADK-compatible BaseTool instances.
Exposure to Agent: These adapted tools are then made available to your LlmAgent as if they were native ADK tools.
Proxying Tool Calls: When your LlmAgent decides to use one of these tools, MCPToolset transparently proxies the call (using the call_tool MCP method) to the MCP server, sends the necessary arguments, and returns the server's response back to the agent.
Filtering (Optional): You can use the tool_filter parameter when creating an MCPToolset to select a specific subset of tools from the MCP server, rather than exposing all of them to your agent.
Get API key and Enable APIs
In this sub-section, you will generate a new API key named GOOGLE_MAPS_API_KEY.

Open the browser tab displaying the Google Cloud Console (not your Cloud Shell Editor).

You can close the Cloud Shell Terminal pane on this browser tab for more console area.

Search for Credentials in the search bar at the top of the page. Select it from the results.

Credentials Page

On the Credentials page, click + Create Credentials at the top of the page, then select API key.

The API key created dialog will display your newly created API key. Be sure to save this key locally for later use in the lab.

Click Close on the dialog box.

Your newly created key will be named API Key 1 by default. Select the key, rename it to GOOGLE_MAPS_API_KEY, and click Save.

Google Map Key

Define your Agent with an MCPToolset for Google Maps
In this sub-section, you will configure your agent to use the MCPToolset for Google Maps, enabling it to seamlessly provide directions and location-based information.

In the Cloud Shell Editor's file explorer pane, find the adk_mcp_tools folder. Click it to toggle it open.

Navigate to the directory adk_mcp_tools/google_maps_mcp_agent.

Paste the following command in a plain text file, then update the YOUR_ACTUAL_API_KEY value with the Google Maps API key you generated and saved in a previous step:

cd ~/adk_mcp_tools
cat << EOF > google_maps_mcp_agent/.env
GOOGLE_GENAI_USE_VERTEXAI=TRUE
GOOGLE_CLOUD_PROJECT=qwiklabs-gcp-01-e2ce529e6af0
GOOGLE_CLOUD_LOCATION=us-central1
GOOGLE_MAPS_API_KEY="YOUR_ACTUAL_API_KEY"
EOF
Copied!
Copy and paste the updated command to Cloud Shell Terminal to run it and write a .env file which will provide authentication details for this agent directory.

Copy the .env file to the other agent directory you will use in this lab by running the following command:

cp google_maps_mcp_agent/.env adk_mcp_server/.env
Copied!
Next, add the following code where indicated in the agent.py file to add the Google maps tool to your agent. This will allow your agent to use the MCPToolset for Google Maps to provide directions or location-based information.

    tools=[
        MCPToolset(
        connection_params=StdioConnectionParams(
            server_params=StdioServerParameters(
                command='npx',
                args=[
                    "-y",
                    "@modelcontextprotocol/server-google-maps",
                ],
                env={
                    "GOOGLE_MAPS_API_KEY": google_maps_api_key
                }
            ),
            timeout=15,
            ),
        )
    ],
Copied!
From the adk_mcp_tools project directory, launch the Agent Development Kit Dev UI with the following command:

adk web
Copied!
Output:

INFO:     Started server process [2434]
INFO:     Waiting for application startup.
+----------------------------------------------------+
| ADK Web Server started                             |
|                                                    |
| For local testing, access at http://localhost:8000.|
+----------------------------------------------------+

INFO:     Application startup complete.
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
To view the web interface in a new tab, click the http://127.0.0.1:8000 link in the Terminal output.

A new browser tab will open with the ADK Dev UI. From the Select an agent dropdown on the left, select the google_maps_mcp_agent from the dropdown.

Start a conversation with the agent and run the following prompts:

Get directions from GooglePlex to SFO.
Copied!
Note: If your API call times out the first time you use it, click + New Session in the upper right of the ADK Dev UI and try again.
What's the route from Paris, France to Berlin, Germany?
Copied!
Output:

Agent Response

Click the agent icon next to the agent's chat bubble with a lightning bolt, which indicates a function call. This will open up the Event inspector for this event:

ADK Tool Call
Notice that agent graph indicates several different tools, identified by the wrench emoji (ðŸ”§). Even though you only imported one MCPToolset, that tool set came with the different tools you see listed here, such as maps_place_details and maps_directions.

The agent graph indicates several tools
On the Request tab, you can see the structure of the request. You can use the arrows at the top of the Event inspector to browse the agent's thoughts, function calls, and responses.

When you are finished asking questions of this agent, close the dev UI browser tab.

Go back to the Cloud Shell Terminal panel and press CTRL + C to stop the server.

Task 3. Building an MCP server with ADK tools (MCP server exposing ADK)
In this section, you'll learn how to expose the ADK load_web_page tool through a custom-built MCP server. This pattern allows you to wrap existing ADK tools and make them accessible to any standard MCP client application.

Create the MCP Server Script and Implement Server Logic
Return to your Cloud Shell Editor tab and select the adk_mcp_tools/adk_mcp_server directory.

A Python file named adk_server.py has been prepared and commented for you. Take some time to review that file, reading the comments to understand how the code wraps a tool and serves it as an MCP server. Notice how it allows MCP clients to list available tools as well as invoke the ADK tool asynchronously, handling requests and responses in an MCP-compliant format.

Test the Custom MCP Server with an ADK Agent
Click on the agent.py file in the adk_mcp_server directory.

Update the path to your adk_server.py file.

/home/student_03_718ab9d6575a/adk_mcp_tools/adk_mcp_server/adk_server.py
Copied!
Next, add the following code where indicated in the agent.py file to add the MCPToolset to your agent. An ADK agent acts as a client to the MCP server. This ADK agent will use MCPToolset to connect to your adk_server.py script.

    tools=[
        MCPToolset(
        connection_params=StdioConnectionParams(
            server_params=StdioServerParameters(
                command="python3", # Command to run your MCP server script
                args=[PATH_TO_YOUR_MCP_SERVER_SCRIPT], # Argument is the path to the script
            ),
            timeout=15,
            ),
            tool_filter=['load_web_page'] # Optional: ensure only specific tools are loaded
        )
    ],
Copied!
To run the MCP server, start the adk_server.py script by running the following command in Cloud Shell Terminal:

python3 ~/adk_mcp_tools/adk_mcp_server/adk_server.py
Copied!
Output:

MCP Server

Open a new Cloud Shell Terminal tab by clicking the add-session-button button at the top of the Cloud Shell Terminal window.

In the Cloud Shell Terminal, from the adk_mcp_tools project directory, launch the Agent Development Kit Dev UI with the following command:

cd ~/adk_mcp_tools
adk web
Copied!
To view the web interface in a new tab, click the http://127.0.0.1:8000 link in the Terminal output.

From the Select an agent dropdown on the left, select the adk_mcp_server from the dropdown.

Query the agent with:

Load the content from https://example.com.
Copied!
Output:

Agent response

What happens here:

The ADK agent (web_reader_mcp_client_agent) uses the MCPToolset to connect to your adk_server.py.
The MCP server will receive the call_tool request, execute the ADK load_web_page tool, and return the result.
The ADK agent will then relay this information. You should see logs from both the ADK Web UI (and its terminal) and from your adk_server.py terminal in the Cloud Shell Terminal tab where it is running.
This demonstrates that ADK tools can be encapsulated within an MCP server, making them accessible to a broad range of MCP-compliant clients including ADK agents.
